select * from moct_link order by gid DESC
select gid from moct_node where node_id= '1160002300' OR node_id= '1200018700'

SELECT f_node source_id, t_node target_id, shape_stle FROM moct_link

SELECT *
FROM shortest_path('
      SELECT
         gid AS id,
         f_node::varchar,
         t_node::varchar,
         shape_stle::double precision AS cost,
         shape_stle::double precision AS reverse_cost
      FROM moct_link',
      3,
      7,
      true,
      true);
CREATE EXTENSION pgrouting;
ALTER EXTENSION pgrouting UPDATE TO "2.6.3";
SELECT PostGIS_Full_Version();
---------------------------------------


SELECT ST_X(ST_StartPoint((ST_LineMerge(geom)))), ST_Y(ST_StartPoint((ST_LineMerge(geom)))),
	ST_X(ST_EndPoint((ST_LineMerge(geom)))), ST_Y(ST_EndPoint((ST_LineMerge(geom))))
from moct_link where link_id= '1160005602'
			
select * from moct_link order by gid LIMIT 100;
select * from moct_link WHERE f_node= '1160002300' AND gid = 142350; 93501
select * from moct_link WHERE f_node= '1160006600' AND gid = 130451; 92374
ALTER TABLE moct_link ADD COLUMN source integer;
ALTER TABLE moct_link ADD COLUMN target integer;
SELECT assign_vertex_id('moct_link', 0.1, 'geom', 'gid');
																			
SELECT ST_SRID(geom) FROM moct_link;
ALTER TABLE moct_link ADD COLUMN x1 double precision;
ALTER TABLE moct_link ADD COLUMN y1 double precision;
ALTER TABLE moct_link ADD COLUMN x2 double precision;
ALTER TABLE moct_link ADD COLUMN y2 double precision;

UPDATE moct_link SET source = a.gid FROM (select node.node_id, node.gid  from moct_link link, moct_node node WHERE node.node_id = link.f_node order by link.gid) as a where moct_link.f_node = a.node_id;
UPDATE moct_link SET target = a.gid FROM (select node.node_id, node.gid  from moct_link link, moct_node node WHERE node.node_id = link.t_node order by link.gid) as a where moct_link.t_node = a.node_id;
UPDATE moct_link SET x1 = ST_X(ST_StartPoint((ST_LineMerge(geom))));
UPDATE moct_link SET y1 = ST_Y(ST_StartPoint((ST_LineMerge(geom))));
UPDATE moct_link SET x2 = ST_X(ST_EndPoint((ST_LineMerge(geom))));
UPDATE moct_link SET y2 = ST_Y(ST_EndPoint((ST_LineMerge(geom))));
select * from moct_node order by gid;
SELECT  seq, id1 AS node, id2 AS edge, cost FROM pgr_astar(
			'SELECT
                 gid AS id,
                 source::integer,
                 target::integer,
                 1::double precision AS cost,
				-1::double precision AS reverse_cost,
                 x1, y1, x2, y2
               FROM moct_link
				WHERE gid= 142350 OR gid = 130451
				ORDER BY id' ,
               142350,
               130451,
               false,
               false);
														 
SELECT  seq, id1 AS node, id2 AS edge, cost FROM pgr_astar(
			'SELECT
                 link.link_id AS id,
                 link.source::integer,
                 link.target::integer,
                 1::double precision AS cost,
				-1::double precision AS reverse_cost,
                 link.x1, link.y1, link.x2, link.y2
                FROM moct_link link, moct_node node
				WHERE link.f_node = node.node_id
				ORDER BY id' ,
               1,
               5,
               false,
               false);
														 

------------------------------------------------------------------
select * from moct_link order by gid LIMIT 100;
CREATE TABLE edge_table (
    id serial,
    dir character varying,
    source integer,
    target integer,
    cost double precision,
    reverse_cost double precision,
    x1 double precision,
    y1 double precision,
    x2 double precision,
    y2 double precision,
    the_geom geometry
);

----------------------------------------------------------------
CREATE TABLE navi_table (
    id character varying,
    source integer,
    target integer,
    cost double precision,
    reverse_cost double precision,
    x1 double precision,
    y1 double precision,
    x2 double precision,
    y2 double precision,
    the_geom geometry
);
DROP TABLE navi_table
INSERT INTO navi_table (id, source, target, cost, reverse_cost, x1, y1, x2, y2, the_geom)
SELECT
 link.link_id AS id,
 link.source::integer,
 link.target::integer,
 1::double precision AS cost,
-1::double precision AS reverse_cost,
 link.x1, link.y1, link.x2, link.y2, link.geom
FROM moct_link link, moct_node node
WHERE link.f_node = node.node_id
ORDER BY id;

SELECT pgr_createTopology('navi_table',0.001);		
SELECT pgr_createTopology('navi_table', 0.000001, 'geom', 'f_node');
SELECT *
FROM pgr_astar(
		'SELECT id, source, target, cost, x1, y1, x2, y2, reverse_cost FROM navi_table',
		4, 1, true, true
);								 
														 
														 
														 
														 
														 
														 
														 
														 
---------------------------------------------------------

기본예시

---------------------------------------------------------

CREATE TABLE edge_table (
    id serial,
    dir character varying,
    source integer,
    target integer,
    cost double precision,
    reverse_cost double precision,
    x1 double precision,
    y1 double precision,
    x2 double precision,
    y2 double precision,
    the_geom geometry
);
DROP TABLE edge_table;

INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1, 1,  2,0,   2,1);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES (-1, 1,  2,1,   3,1);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES (-1, 1,  3,1,   4,1);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1, 1,  2,1,   2,2);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1,-1,  3,1,   3,2);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1, 1,  0,2,   1,2);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1, 1,  1,2,   2,2);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1, 1,  2,2,   3,2);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1, 1,  3,2,   4,2);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1, 1,  2,2,   2,3);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1,-1,  3,2,   3,3);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1,-1,  2,3,   3,3);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1,-1,  3,3,   4,3);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1, 1,  2,3,   2,4);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1, 1,  4,2,   4,3);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1, 1,  4,1,   4,2);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1, 1,  0.5,3.5,  1.999999999999,3.5);
INSERT INTO edge_table (cost,reverse_cost,x1,y1,x2,y2) VALUES ( 1, 1,  3.5,2.3,  3.5,4);

UPDATE edge_table SET the_geom = st_makeline(st_point(x1,y1),st_point(x2,y2)),
dir = CASE WHEN (cost>0 and reverse_cost>0) THEN 'B'   -- both ways
WHEN (cost>0 and reverse_cost<0) THEN 'FT'  -- direction of the LINESSTRING
WHEN (cost<0 and reverse_cost>0) THEN 'TF'  -- reverse direction of the LINESTRING
ELSE '' END;       
SELECT pgr_createTopology('edge_table',0.001);
CREATE TABLE vertex_table (
	id serial,
	x double precision,
	y double precision
);
INSERT INTO vertex_table VALUES
(1,2,0), (2,2,1), (3,3,1), (4,4,1), (5,0,2), (6,1,2), (7,2,2),
(8,3,2), (9,4,2), (10,2,3), (11,3,3), (12,4,3), (13,2,4);
DROP table vertex_table;
SELECT seq, id1 AS node, id2 AS edge, cost
FROM pgr_astar(
		'SELECT id, source, target, cost, x1, y1, x2, y2 FROM edge_table',
		4, 1, false, false
);  
																	  select pgr_dijkstra('SELECT * FROM edge_table', 1, 2)
SELECT *
FROM pgr_astar(
		'SELECT id, source, target, cost, x1, y1, x2, y2, reverse_cost FROM edge_table',
		4, 1, true, true
);
SELECT ST_AsText(the_geom) FROM edge_table;
SELECT * FROM edge_table;

										 
														 
---------------------------------------------------------

최종 나의 활용

---------------------------------------------------------

CREATE TABLE link_test1_table (
    id serial,
    dir character varying,
	linkId character varying,
    source integer,
    target integer,
    cost double precision,
    reverse_cost double precision,
    x1 double precision,
    y1 double precision,
    x2 double precision,
    y2 double precision,
    the_geom geometry
);
DROP TABLE link_test1_table;

INSERT INTO link_test1_table (linkId, source, target, cost,reverse_cost,x1,y1,x2,y2) 
SELECT
 link.link_id,
 link.source,
 link.target,
 link.shape_stle::double precision AS cost,
-1::double precision AS reverse_cost,
 link.x1, link.y1, link.x2, link.y2
FROM (SELECT * FROM moct_link order by source) link, moct_node node
WHERE link.f_node = node.node_id;
UPDATE link_test1_table SET the_geom = st_makeline(st_point(x1,y1),st_point(x2,y2));
SELECT * FROM link_test1_table LIMIT 100;
SELECT pgr_createTopology('link_test1_table',0.001);

SELECT result.seq, result.id1 node_gid, result.id2 link_gid, result.cost, moctLink.geom, SUM(result.cost) OVER() distence
FROM (
	SELECT *
	FROM pgr_astar(
		'SELECT id, linkId, source, target, cost, x1, y1, x2, y2, 
		reverse_cost FROM link_test1_table ORDER BY id',
		93513, 80828, true, true
		) 
	) result
LEFT JOIN link_test1_table link
ON result.id2= link.id
LEFT JOIN moct_link moctLink
ON moctLink.link_id = link.linkid
ORDER BY seq;

SELECT * FROM public.moct_node
WHERE node_id= '1160006600'
SELECT * FROM public.moct_node
WHERE node_id= '1680048300'


SELECT * FROM link_test1_table WHERE id = 37351 
SELECT * FROM moct_link WHERE gid= '281085'